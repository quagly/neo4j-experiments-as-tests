apply plugin: 'base'
apply plugin: 'groovy'

def neo4jVer  = '2.1.2'
// api changes cause build to fail in neo4j version 3.3
// unable to resolve class ExecutionEngine
// engine = new ExecutionEngine( graphDb )
def groovyVer = '2.4.13'
def spockVer = '1.1-groovy-2.4'
// note GradleVersion is an internal class and may change
// I have not found another way to print gradle version
// use of GradleVersion is now deprecated and will fail in version 5.
// What is the alternative?
println GradleVersion.current()

defaultTasks 'test'

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  compile "org.codehaus.groovy:groovy-all:${groovyVer}"
  compile "org.neo4j:neo4j:${neo4jVer}" // don't need all of neo4j, and only testing now anyway

  testCompile "org.spockframework:spock-core:${spockVer}"
  testCompile "org.neo4j:neo4j-kernel:${neo4jVer}:tests"

}

// say why if test fails
// so that I don't have to open the html report to look
test {
  testLogging {
    // show STDOUT
    showStandardStreams = true
    // show what failed
    exceptionFormat = 'full'
  }
}

task createGraphGists ( dependsOn: 'classes', type: JavaExec ) {
  description = 'parses spock tests and generates GraphGist adoc files'
  main 'createGraphGists'
  // this was failing, since I don't use createGraphGists lately I am commenting out
  // classpath = sourceSets.Main.runtimeClasspath
  ext.srcDir = new File( projectDir, 'src/test/groovy' )
  ext.destDir = new File( projectDir, 'out/graphGists' )
  inputs.dir  srcDir
  outputs.dir destDir
  destDir.mkdirs()
}

// may wish to seperate this into classes config and test config.
// for now they are the same
task createGroovyConfig {
  description = 'create groovy config file of project properties'
  ext.configSlurperMain = new File( projectDir, "/src/main/resources/project.groovy")
  ext.configSlurperTest = new File( projectDir, "/src/test/resources/project.groovy")
  // can't use outputs as changes made here will never apply
  // becaues the output files haven't changed
  //outputs.file configSlurperMain
  //outputs.file configSlurperTest
  ext.configString = """\
  projectDir =  '${projectDir}'
  """
  // only run if files need to change
  doLast{
    println "creating configSlurperFiles"
    configSlurperMain.setText(configString)
    configSlurperTest.setText(configString)
  }
}

classes.dependsOn("createGroovyConfig")
